"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
A model package is stored in meta blobs and data blobs. Meta blobs describe all files and
directories in the model package, and data blobs are actual file data.

When creating the model package, a Breath-First-Search (BFS) is performed on the directory tree.
Each node, either a directory or a file, is described as a File protobuf message and added to a
list during the search. For each directory, itself is added af first, then all its subdirectories
in alphabet order, and finally all its files in alphabet order. Thus the root directory is always
the first one in the list.

During the search, file data are written to data blobs. Files are split into 65533-bytes blocks.
Each block is tried to be compressed at first. If the compressed size is greater than the
original size, then the block is stored without compression. Each block, whether compressed or
not, is preceded with a byte denoting the compression algorithm(enum CompressionAlgorithm) and
two-bytes in network order representing the size of the block, and then written to a 4MB buffer.
When the buffer is full, it is dumped to a data block. If a file has more than one data blobs, it
is considered as a huge file and its data blob references should be put in separate File protobuf
messages so that listing directories can be pretty fast. These messages should be appended to the
File protobuf list during the search.

The File message list is finally split into 64KB meta blobs. The first meta blob contains indexes
to other meta blobs. Meta blobs are not compressed.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _CompressionAlgorithm:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _CompressionAlgorithmEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CompressionAlgorithm.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    COMPRESSION_ALGORITHM_NO_COMPRESSION: _CompressionAlgorithm.ValueType  # 0
    COMPRESSION_ALGORITHM_LZ4: _CompressionAlgorithm.ValueType  # 1

class CompressionAlgorithm(_CompressionAlgorithm, metaclass=_CompressionAlgorithmEnumTypeWrapper): ...

COMPRESSION_ALGORITHM_NO_COMPRESSION: CompressionAlgorithm.ValueType  # 0
COMPRESSION_ALGORITHM_LZ4: CompressionAlgorithm.ValueType  # 1
global___CompressionAlgorithm = CompressionAlgorithm

class _FileType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _FileTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_FileType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    FILE_TYPE_REGULAR: _FileType.ValueType  # 0
    FILE_TYPE_HUGE: _FileType.ValueType  # 1
    FILE_TYPE_DIRECTORY: _FileType.ValueType  # 2
    FILE_TYPE_SYMLINK: _FileType.ValueType  # 3
    FILE_TYPE_HARDLINK: _FileType.ValueType  # 4

class FileType(_FileType, metaclass=_FileTypeEnumTypeWrapper): ...

FILE_TYPE_REGULAR: FileType.ValueType  # 0
FILE_TYPE_HUGE: FileType.ValueType  # 1
FILE_TYPE_DIRECTORY: FileType.ValueType  # 2
FILE_TYPE_SYMLINK: FileType.ValueType  # 3
FILE_TYPE_HARDLINK: FileType.ValueType  # 4
global___FileType = FileType

@typing_extensions.final
class File(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    SIZE_FIELD_NUMBER: builtins.int
    PERMISSION_FIELD_NUMBER: builtins.int
    BLOB_IDS_FIELD_NUMBER: builtins.int
    SIGNED_URLS_FIELD_NUMBER: builtins.int
    BLOB_OFFSET_FIELD_NUMBER: builtins.int
    BLOB_SIZE_FIELD_NUMBER: builtins.int
    MD5_FIELD_NUMBER: builtins.int
    COMPRESSION_ALGORITHM_FIELD_NUMBER: builtins.int
    FROM_FILE_INDEX_FIELD_NUMBER: builtins.int
    TO_FILE_INDEX_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    type: global___FileType.ValueType
    name: builtins.str
    size: builtins.int
    permission: builtins.int
    @property
    def blob_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Points to data blobs. For huge files, blob_ids should be put in separate File messages that
        keeps the directory content as small as possible.
        """
    @property
    def signed_urls(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """only set for restful API"""
    blob_offset: builtins.int
    """only used for files whose sizes are less than 4KB"""
    blob_size: builtins.int
    """only used for files whose sizes are less than 4KB"""
    md5: builtins.bytes
    compression_algorithm: global___CompressionAlgorithm.ValueType
    from_file_index: builtins.int
    """For directories, they are the range of directories contents. For huge files, they are the range
    of data blobs references. from_file_index is inclusive, to_file_index is exclusive.
    """
    to_file_index: builtins.int
    link: builtins.str
    """stores link target, either hardlink or symlink"""
    def __init__(
        self,
        *,
        type: global___FileType.ValueType = ...,
        name: builtins.str = ...,
        size: builtins.int = ...,
        permission: builtins.int = ...,
        blob_ids: collections.abc.Iterable[builtins.str] | None = ...,
        signed_urls: collections.abc.Iterable[builtins.str] | None = ...,
        blob_offset: builtins.int = ...,
        blob_size: builtins.int = ...,
        md5: builtins.bytes = ...,
        compression_algorithm: global___CompressionAlgorithm.ValueType = ...,
        from_file_index: builtins.int = ...,
        to_file_index: builtins.int = ...,
        link: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["blob_ids", b"blob_ids", "blob_offset", b"blob_offset", "blob_size", b"blob_size", "compression_algorithm", b"compression_algorithm", "from_file_index", b"from_file_index", "link", b"link", "md5", b"md5", "name", b"name", "permission", b"permission", "signed_urls", b"signed_urls", "size", b"size", "to_file_index", b"to_file_index", "type", b"type"]) -> None: ...

global___File = File

@typing_extensions.final
class MetaBlobIndex(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BLOB_ID_FIELD_NUMBER: builtins.int
    LAST_FILE_INDEX_FIELD_NUMBER: builtins.int
    blob_id: builtins.str
    last_file_index: builtins.int
    def __init__(
        self,
        *,
        blob_id: builtins.str = ...,
        last_file_index: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["blob_id", b"blob_id", "last_file_index", b"last_file_index"]) -> None: ...

global___MetaBlobIndex = MetaBlobIndex

@typing_extensions.final
class MetaBlob(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FILES_FIELD_NUMBER: builtins.int
    META_BLOB_INDEXES_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    @property
    def files(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___File]: ...
    @property
    def meta_blob_indexes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MetaBlobIndex]:
        """only the first meta blob has following field"""
    data: builtins.bytes
    """data blob buffer less than 16KB"""
    def __init__(
        self,
        *,
        files: collections.abc.Iterable[global___File] | None = ...,
        meta_blob_indexes: collections.abc.Iterable[global___MetaBlobIndex] | None = ...,
        data: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["data", b"data", "files", b"files", "meta_blob_indexes", b"meta_blob_indexes"]) -> None: ...

global___MetaBlob = MetaBlob
