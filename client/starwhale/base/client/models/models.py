# Generated by make gen-model. DO NOT EDIT!

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import Field, constr, BaseModel


class UserUpdateStateRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    is_enabled: bool = Field(..., alias='isEnabled')


class ResponseMessageString(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: str


class UserUpdatePasswordRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    current_user_pwd: str = Field(..., alias='currentUserPwd')
    new_pwd: str = Field(..., alias='newPwd')


class UserRoleUpdateRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    current_user_pwd: str = Field(..., alias='currentUserPwd')
    role_id: str = Field(..., alias='roleId')


class UpdateProjectRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    project_name: Optional[constr(regex=r'^[a-zA-Z][a-zA-Z\d_-]{2,80}$')] = Field(
        None, alias='projectName'
    )
    privacy: Optional[str] = None
    description: Optional[str] = None


class ResponseMessageObject(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: Dict[str, Any]


class RuntimeTagRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    force: Optional[bool] = None
    tag: str


class UpdateReportRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    title: Optional[constr(min_length=0, max_length=255)] = None
    description: Optional[constr(min_length=0, max_length=255)] = None
    content: Optional[str] = None
    shared: Optional[bool] = None


class ModelUpdateRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    tag: Optional[str] = None
    built_in_runtime: Optional[str] = None


class JobModifyRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    comment: str


class ApplySignedUrlRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    flag: Optional[str] = None
    path_prefix: str = Field(..., alias='pathPrefix')
    files: List[str] = Field(..., unique_items=True)


class SignedUrlResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    path_prefix: Optional[str] = Field(None, alias='pathPrefix')
    signed_urls: Optional[Dict[str, str]] = Field(None, alias='signedUrls')


class UserRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    user_name: constr(regex=r'^[a-zA-Z][a-zA-Z\d_-]{3,32}$') = Field(
        ..., alias='userName'
    )
    user_pwd: str = Field(..., alias='userPwd')
    salt: Optional[str] = None


class UserCheckPasswordRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    current_user_pwd: str = Field(..., alias='currentUserPwd')


class UpgradeRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    version: str
    image: str


class Resource(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: Optional[str] = None
    max: Optional[float] = None
    min: Optional[float] = None
    defaults: Optional[float] = None


class Toleration(BaseModel):
    class Config:
        allow_population_by_field_name = True

    key: Optional[str] = None
    operator: Optional[str] = None
    value: Optional[str] = None
    effect: Optional[str] = None
    toleration_seconds: Optional[int] = Field(None, alias='tolerationSeconds')


class UserRoleAddRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    current_user_pwd: str = Field(..., alias='currentUserPwd')
    user_id: str = Field(..., alias='userId')
    role_id: str = Field(..., alias='roleId')


class CreateProjectRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    project_name: constr(regex=r'^[a-zA-Z][a-zA-Z\d_-]{2,80}$') = Field(
        ..., alias='projectName'
    )
    privacy: str
    description: str


class CreateModelVersionRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    meta_blob_id: str = Field(..., alias='metaBlobId')
    built_in_runtime: Optional[str] = Field(None, alias='builtInRuntime')
    force: Optional[bool] = None


class ModelServingRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    model_version_url: str = Field(..., alias='modelVersionUrl')
    runtime_version_url: str = Field(..., alias='runtimeVersionUrl')
    resource_pool: Optional[str] = Field(None, alias='resourcePool')
    ttl_in_seconds: Optional[int] = Field(None, alias='ttlInSeconds')
    spec: Optional[str] = None


class ModelServingVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: str
    base_uri: Optional[str] = Field(None, alias='baseUri')


class ResponseMessageModelServingVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: ModelServingVo


class RunEnvs(BaseModel):
    class Config:
        allow_population_by_field_name = True

    env_vars: Optional[Dict[str, str]] = Field(None, alias='envVars')


class BuildImageResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    success: Optional[bool] = None
    message: Optional[str] = None


class ResponseMessageBuildImageResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: BuildImageResult


class RuntimeRevertRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    version_url: str = Field(..., alias='versionUrl')


class ClientRuntimeRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    runtime: Optional[str] = None
    project: Optional[str] = None
    force: Optional[str] = None
    manifest: Optional[str] = None


class CreateReportRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    title: constr(min_length=1, max_length=255)
    description: Optional[constr(min_length=0, max_length=255)] = None
    content: constr(min_length=1, max_length=2147483647)


class TransferReportRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    target_project_url: str = Field(..., alias='targetProjectUrl')


class ModelTagRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    force: Optional[bool] = None
    tag: str


class RevertModelVersionRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    version_url: str = Field(..., alias='versionUrl')


class Type(Enum):
    evaluation = 'EVALUATION'
    train = 'TRAIN'
    fine_tune = 'FINE_TUNE'
    serving = 'SERVING'
    built_in = 'BUILT_IN'


class DevWay(Enum):
    vs_code = 'VS_CODE'


class JobRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    time_to_live_in_sec: Optional[int] = Field(None, alias='timeToLiveInSec')
    model_version_url: str = Field(..., alias='modelVersionUrl')
    dataset_version_urls: Optional[str] = Field(None, alias='datasetVersionUrls')
    runtime_version_url: str = Field(..., alias='runtimeVersionUrl')
    comment: Optional[str] = None
    resource_pool: str = Field(..., alias='resourcePool')
    handler: str
    step_spec_over_writes: Optional[str] = Field(None, alias='stepSpecOverWrites')
    type: Optional[Type] = None
    dev_mode: Optional[bool] = Field(None, alias='devMode')
    dev_password: Optional[str] = Field(None, alias='devPassword')
    dev_way: Optional[DevWay] = Field(None, alias='devWay')


class ExecRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    command: List[str]


class ExecResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    stdout: Optional[str] = None
    stderr: Optional[str] = None


class ResponseMessageExecResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: ExecResponse


class JobModifyPinRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    pinned: bool


class ConfigRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str
    content: str


class DatasetTagRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    force: Optional[bool] = None
    tag: str


class DataIndexDesc(BaseModel):
    class Config:
        allow_population_by_field_name = True

    start: Optional[str] = None
    end: Optional[str] = None


class ResponseMessageDataIndexDesc(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: DataIndexDesc


class RevertDatasetRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    version_url: str = Field(..., alias='versionUrl')


class Desc(Enum):
    manifest = 'MANIFEST'
    src_tar = 'SRC_TAR'
    src = 'SRC'
    model = 'MODEL'
    data = 'DATA'
    unknown = 'UNKNOWN'


class Phase(Enum):
    manifest = 'MANIFEST'
    blob = 'BLOB'
    end = 'END'
    cancel = 'CANCEL'


class DatasetUploadRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    upload_id: int = Field(..., alias='uploadId')
    part_name: Optional[str] = Field(None, alias='partName')
    signature: Optional[str] = None
    uri: Optional[str] = None
    desc: Optional[Desc] = None
    phase: Phase
    force: Optional[str] = None
    project: str
    swds: str


class UploadResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    upload_id: Optional[int] = Field(None, alias='uploadId')


class Type1(Enum):
    image = 'IMAGE'
    video = 'VIDEO'
    audio = 'AUDIO'


class DatasetBuildRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    type: Type1
    shared: Optional[bool] = None
    storage_path: str = Field(..., alias='storagePath')


class ResponseMessageMapObjectObject(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: Dict[str, Dict[str, Any]]


class ColumnSchemaDesc(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: Optional[str] = None
    type: Optional[str] = None
    python_type: Optional[str] = Field(None, alias='pythonType')
    element_type: Optional[ColumnSchemaDesc] = Field(None, alias='elementType')
    key_type: Optional[ColumnSchemaDesc] = Field(None, alias='keyType')
    value_type: Optional[ColumnSchemaDesc] = Field(None, alias='valueType')


class RecordValueDesc(BaseModel):
    class Config:
        allow_population_by_field_name = True

    key: str
    value: Optional[Dict[str, Any]] = None


class TableSchemaDesc(BaseModel):
    class Config:
        allow_population_by_field_name = True

    key_column: Optional[str] = Field(None, alias='keyColumn')
    column_schema_list: Optional[List[ColumnSchemaDesc]] = Field(
        None, alias='columnSchemaList'
    )


class ColumnDesc(BaseModel):
    class Config:
        allow_population_by_field_name = True

    column_name: Optional[str] = Field(None, alias='columnName')
    alias: Optional[str] = None


class TableDesc(BaseModel):
    class Config:
        allow_population_by_field_name = True

    table_name: Optional[str] = Field(None, alias='tableName')
    column_prefix: Optional[str] = Field(None, alias='columnPrefix')
    columns: Optional[List[ColumnDesc]] = None
    keep_none: Optional[bool] = Field(None, alias='keepNone')
    revision: Optional[str] = None


class ColumnHintsDesc(BaseModel):
    class Config:
        allow_population_by_field_name = True

    type_hints: Optional[List[str]] = Field(None, alias='typeHints')
    column_value_hints: Optional[List[str]] = Field(None, alias='columnValueHints')
    element_hints: Optional[ColumnHintsDesc] = Field(None, alias='elementHints')
    key_hints: Optional[ColumnHintsDesc] = Field(None, alias='keyHints')
    value_hints: Optional[ColumnHintsDesc] = Field(None, alias='valueHints')


class RecordListVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    column_types: Optional[List[ColumnSchemaDesc]] = Field(None, alias='columnTypes')
    column_hints: Optional[Dict[str, ColumnHintsDesc]] = Field(
        None, alias='columnHints'
    )
    records: Optional[List[Dict[str, Dict[str, Any]]]] = None
    last_key: Optional[str] = Field(None, alias='lastKey')


class ResponseMessageRecordListVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: RecordListVo


class OrderByDesc(BaseModel):
    class Config:
        allow_population_by_field_name = True

    column_name: Optional[str] = Field(None, alias='columnName')
    descending: Optional[bool] = None


class ListTablesRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    prefix: Optional[str] = None
    prefixes: Optional[List[str]] = Field(None, unique_items=True)


class TableNameListVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    tables: Optional[List[str]] = None


class FlushRequest(BaseModel):
    pass

    class Config:
        allow_population_by_field_name = True


class InitUploadBlobRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    content_md5: str = Field(..., alias='contentMd5')
    content_length: int = Field(..., alias='contentLength')


class Status(Enum):
    ok = 'OK'
    existed = 'EXISTED'


class InitUploadBlobResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    status: Optional[Status] = None
    blob_id: Optional[str] = Field(None, alias='blobId')
    signed_url: Optional[str] = Field(None, alias='signedUrl')


class ResponseMessageInitUploadBlobResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: InitUploadBlobResult


class CompleteUploadBlobResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    blob_id: Optional[str] = Field(None, alias='blobId')


class ResponseMessageCompleteUploadBlobResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: CompleteUploadBlobResult


class UserVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: str
    name: str
    created_time: int = Field(..., alias='createdTime')
    is_enabled: bool = Field(..., alias='isEnabled')
    system_role: Optional[str] = Field(None, alias='systemRole')
    project_roles: Optional[Dict[str, str]] = Field(None, alias='projectRoles')


class ResponseMessageUserVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: UserVo


class RoleVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: str
    name: str
    code: str
    description: Optional[str] = None


class StatisticsVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    model_counts: int = Field(..., alias='modelCounts')
    dataset_counts: int = Field(..., alias='datasetCounts')
    runtime_counts: int = Field(..., alias='runtimeCounts')
    member_counts: int = Field(..., alias='memberCounts')
    evaluation_counts: int = Field(..., alias='evaluationCounts')


class SystemVersionVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = None
    version: Optional[str] = None


class UpgradeLog(BaseModel):
    class Config:
        allow_population_by_field_name = True

    progress_uuid: Optional[str] = Field(None, alias='progressUuid')
    step_total: Optional[int] = Field(None, alias='stepTotal')
    step_current: Optional[int] = Field(None, alias='stepCurrent')
    title: Optional[str] = None
    content: Optional[str] = None
    status: Optional[str] = None
    created_time: Optional[int] = Field(None, alias='createdTime')


class LatestVersionVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    version: Optional[str] = None
    image: Optional[str] = None


class ResponseMessageLatestVersionVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: LatestVersionVo


class FeaturesVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    disabled: List[str]


class ResponseMessageFeaturesVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: FeaturesVo


class DeviceVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str


class ResponseMessageListDeviceVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: List[DeviceVo]


class ResponseMessageListRoleVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: List[RoleVo]


class ReportVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: int
    uuid: str
    title: str
    content: Optional[str] = None
    description: Optional[str] = None
    shared: Optional[bool] = None
    owner: UserVo
    created_time: int = Field(..., alias='createdTime')
    modified_time: int = Field(..., alias='modifiedTime')


class ResponseMessageReportVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: ReportVo


class Flag(Enum):
    added = 'added'
    updated = 'updated'
    deleted = 'deleted'
    unchanged = 'unchanged'


class Type2(Enum):
    directory = 'directory'
    file = 'file'


class FileNode(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: Optional[str] = None
    signature: Optional[str] = None
    flag: Optional[Flag] = None
    mime: Optional[str] = None
    type: Optional[Type2] = None
    desc: Optional[str] = None
    size: Optional[str] = None


class ListFilesResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    files: Optional[List[FileNode]] = None


class ResponseMessageListFilesResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: ListFilesResult


class TrashVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = None
    name: Optional[str] = None
    type: Optional[str] = None
    trashed_time: Optional[int] = Field(None, alias='trashedTime')
    size: Optional[int] = None
    trashed_by: Optional[str] = Field(None, alias='trashedBy')
    last_updated_time: Optional[int] = Field(None, alias='lastUpdatedTime')
    retention_time: Optional[int] = Field(None, alias='retentionTime')


class RuntimeVersionVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    tags: Optional[List[str]] = None
    latest: bool
    id: str
    runtime_id: str = Field(..., alias='runtimeId')
    name: str
    alias: str
    meta: Optional[str] = None
    image: str
    built_image: Optional[str] = Field(None, alias='builtImage')
    created_time: int = Field(..., alias='createdTime')
    owner: Optional[UserVo] = None
    shared: int


class RuntimeVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: str
    name: str
    created_time: int = Field(..., alias='createdTime')
    owner: UserVo
    version: RuntimeVersionVo


class FlattenFileVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: Optional[str] = None
    size: Optional[str] = None


class RuntimeInfoVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    version_info: RuntimeVersionVo = Field(..., alias='versionInfo')
    id: str
    name: str
    version_id: str = Field(..., alias='versionId')
    version_name: str = Field(..., alias='versionName')
    version_alias: str = Field(..., alias='versionAlias')
    version_tag: Optional[str] = Field(None, alias='versionTag')
    version_meta: Optional[str] = Field(None, alias='versionMeta')
    manifest: str
    shared: int
    created_time: int = Field(..., alias='createdTime')
    files: Optional[List[FlattenFileVo]] = None


class PageInfoRuntimeVersionVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total: Optional[int] = None
    list: Optional[List[RuntimeVersionVo]] = None
    page_num: Optional[int] = Field(None, alias='pageNum')
    page_size: Optional[int] = Field(None, alias='pageSize')
    size: Optional[int] = None
    start_row: Optional[int] = Field(None, alias='startRow')
    end_row: Optional[int] = Field(None, alias='endRow')
    pages: Optional[int] = None
    pre_page: Optional[int] = Field(None, alias='prePage')
    next_page: Optional[int] = Field(None, alias='nextPage')
    is_first_page: Optional[bool] = Field(None, alias='isFirstPage')
    is_last_page: Optional[bool] = Field(None, alias='isLastPage')
    has_previous_page: Optional[bool] = Field(None, alias='hasPreviousPage')
    has_next_page: Optional[bool] = Field(None, alias='hasNextPage')
    navigate_pages: Optional[int] = Field(None, alias='navigatePages')
    navigatepage_nums: Optional[List[int]] = Field(None, alias='navigatepageNums')
    navigate_first_page: Optional[int] = Field(None, alias='navigateFirstPage')
    navigate_last_page: Optional[int] = Field(None, alias='navigateLastPage')


class ResponseMessagePageInfoRuntimeVersionVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: PageInfoRuntimeVersionVo


class ResponseMessageListString(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: List[str]


class ResponseMessageLong(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: int


class RuntimeVersionViewVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: str
    version_name: str = Field(..., alias='versionName')
    alias: str
    latest: bool
    shared: int
    created_time: int = Field(..., alias='createdTime')


class RuntimeViewVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    owner_name: str = Field(..., alias='ownerName')
    project_name: str = Field(..., alias='projectName')
    runtime_id: str = Field(..., alias='runtimeId')
    runtime_name: str = Field(..., alias='runtimeName')
    shared: int
    versions: List[RuntimeVersionViewVo]


class PageInfoReportVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total: Optional[int] = None
    list: Optional[List[ReportVo]] = None
    page_num: Optional[int] = Field(None, alias='pageNum')
    page_size: Optional[int] = Field(None, alias='pageSize')
    size: Optional[int] = None
    start_row: Optional[int] = Field(None, alias='startRow')
    end_row: Optional[int] = Field(None, alias='endRow')
    pages: Optional[int] = None
    pre_page: Optional[int] = Field(None, alias='prePage')
    next_page: Optional[int] = Field(None, alias='nextPage')
    is_first_page: Optional[bool] = Field(None, alias='isFirstPage')
    is_last_page: Optional[bool] = Field(None, alias='isLastPage')
    has_previous_page: Optional[bool] = Field(None, alias='hasPreviousPage')
    has_next_page: Optional[bool] = Field(None, alias='hasNextPage')
    navigate_pages: Optional[int] = Field(None, alias='navigatePages')
    navigatepage_nums: Optional[List[int]] = Field(None, alias='navigatepageNums')
    navigate_first_page: Optional[int] = Field(None, alias='navigateFirstPage')
    navigate_last_page: Optional[int] = Field(None, alias='navigateLastPage')


class ResponseMessagePageInfoReportVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: PageInfoReportVo


class ContainerSpec(BaseModel):
    class Config:
        allow_population_by_field_name = True

    image: Optional[str] = None
    cmds: Optional[List[str]] = None
    entrypoint: Optional[List[str]] = None


class Env(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: Optional[str] = None
    value: Optional[str] = None


class ParameterSignature(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str
    required: Optional[bool] = None
    multiple: Optional[bool] = None


class RuntimeResource(BaseModel):
    class Config:
        allow_population_by_field_name = True

    type: Optional[str] = None
    request: Optional[float] = None
    limit: Optional[float] = None


class StepSpec(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str
    concurrency: int
    replicas: int
    needs: Optional[List[str]] = None
    resources: Optional[List[RuntimeResource]] = None
    env: Optional[List[Env]] = None
    expose: Optional[int] = None
    virtual: Optional[bool] = None
    job_name: Optional[str] = None
    show_name: str
    require_dataset: Optional[bool] = None
    container_spec: Optional[ContainerSpec] = None
    ext_cmd_args: Optional[str] = None
    parameters_sig: Optional[List[ParameterSignature]] = None


class ResponseMessageMapStringListFileNode(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: Dict[str, List[FileNode]]


class ModelVersionViewVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: str
    version_name: str = Field(..., alias='versionName')
    alias: str
    latest: bool
    tags: Optional[List[str]] = None
    shared: int
    step_specs: List[StepSpec] = Field(..., alias='stepSpecs')
    built_in_runtime: Optional[str] = Field(None, alias='builtInRuntime')
    created_time: int = Field(..., alias='createdTime')


class ModelViewVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    owner_name: str = Field(..., alias='ownerName')
    project_name: str = Field(..., alias='projectName')
    model_id: str = Field(..., alias='modelId')
    model_name: str = Field(..., alias='modelName')
    shared: int
    versions: List[ModelVersionViewVo]


class ResponseMessageListModelViewVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: List[ModelViewVo]


class DatasetVersionVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    tags: Optional[List[str]] = None
    latest: bool
    index_table: Optional[str] = Field(None, alias='indexTable')
    id: str
    name: str
    alias: Optional[str] = None
    meta: Optional[str] = None
    created_time: int = Field(..., alias='createdTime')
    owner: Optional[UserVo] = None
    shared: Optional[int] = None


class DatasetVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: str
    name: str
    created_time: int = Field(..., alias='createdTime')
    owner: Optional[UserVo] = None
    version: DatasetVersionVo


class Type3(Enum):
    dev_mode = 'DEV_MODE'
    web_handler = 'WEB_HANDLER'


class ExposedLinkVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    type: Type3
    name: str
    link: str


class JobStatus(Enum):
    created = 'CREATED'
    ready = 'READY'
    paused = 'PAUSED'
    running = 'RUNNING'
    cancelling = 'CANCELLING'
    canceled = 'CANCELED'
    success = 'SUCCESS'
    fail = 'FAIL'
    unknown = 'UNKNOWN'


class TaskStatus(Enum):
    created = 'CREATED'
    ready = 'READY'
    assigning = 'ASSIGNING'
    paused = 'PAUSED'
    preparing = 'PREPARING'
    running = 'RUNNING'
    success = 'SUCCESS'
    cancelling = 'CANCELLING'
    canceled = 'CANCELED'
    fail = 'FAIL'
    unknown = 'UNKNOWN'


class TaskVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: str
    uuid: str
    started_time: Optional[int] = Field(None, alias='startedTime')
    finished_time: Optional[int] = Field(None, alias='finishedTime')
    task_status: TaskStatus = Field(..., alias='taskStatus')
    retry_num: Optional[int] = Field(None, alias='retryNum')
    resource_pool: str = Field(..., alias='resourcePool')
    step_name: str = Field(..., alias='stepName')
    exposed_links: Optional[List[ExposedLinkVo]] = Field(None, alias='exposedLinks')
    failed_reason: Optional[str] = Field(None, alias='failedReason')


class ResponseMessageTaskVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: TaskVo


class GraphEdge(BaseModel):
    class Config:
        allow_population_by_field_name = True

    from_: Optional[int] = Field(None, alias='from')
    to: Optional[int] = None
    content: Optional[str] = None


class GraphNode(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[int] = None
    type: Optional[str] = None
    content: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    entity_id: Optional[int] = Field(None, alias='entityId')


class AttributeValueVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: Optional[str] = None
    type: Optional[str] = None
    value: Optional[str] = None


class SummaryVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: str
    uuid: str
    project_id: str = Field(..., alias='projectId')
    project_name: str = Field(..., alias='projectName')
    model_name: str = Field(..., alias='modelName')
    model_version: str = Field(..., alias='modelVersion')
    datasets: Optional[str] = None
    runtime: str
    device: Optional[str] = None
    device_amount: Optional[int] = Field(None, alias='deviceAmount')
    created_time: int = Field(..., alias='createdTime')
    stop_time: Optional[int] = Field(None, alias='stopTime')
    owner: str
    duration: Optional[int] = None
    job_status: JobStatus = Field(..., alias='jobStatus')
    attributes: Optional[List[AttributeValueVo]] = None


class ConfigVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: Optional[str] = None
    content: Optional[str] = None
    create_time: Optional[int] = Field(None, alias='createTime')


class ResponseMessageConfigVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: ConfigVo


class AttributeVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: Optional[str] = None
    type: Optional[str] = None


class ResponseMessageListAttributeVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: List[AttributeVo]


class PageInfoDatasetVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total: Optional[int] = None
    list: Optional[List[DatasetVo]] = None
    page_num: Optional[int] = Field(None, alias='pageNum')
    page_size: Optional[int] = Field(None, alias='pageSize')
    size: Optional[int] = None
    start_row: Optional[int] = Field(None, alias='startRow')
    end_row: Optional[int] = Field(None, alias='endRow')
    pages: Optional[int] = None
    pre_page: Optional[int] = Field(None, alias='prePage')
    next_page: Optional[int] = Field(None, alias='nextPage')
    is_first_page: Optional[bool] = Field(None, alias='isFirstPage')
    is_last_page: Optional[bool] = Field(None, alias='isLastPage')
    has_previous_page: Optional[bool] = Field(None, alias='hasPreviousPage')
    has_next_page: Optional[bool] = Field(None, alias='hasNextPage')
    navigate_pages: Optional[int] = Field(None, alias='navigatePages')
    navigatepage_nums: Optional[List[int]] = Field(None, alias='navigatepageNums')
    navigate_first_page: Optional[int] = Field(None, alias='navigateFirstPage')
    navigate_last_page: Optional[int] = Field(None, alias='navigateLastPage')


class ResponseMessagePageInfoDatasetVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: PageInfoDatasetVo


class DatasetInfoVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    index_table: Optional[str] = Field(None, alias='indexTable')
    version_info: Optional[DatasetVersionVo] = Field(None, alias='versionInfo')
    id: str
    name: str
    version_id: str = Field(..., alias='versionId')
    version_name: str = Field(..., alias='versionName')
    version_alias: Optional[str] = Field(None, alias='versionAlias')
    version_tag: Optional[str] = Field(None, alias='versionTag')
    shared: int
    created_time: int = Field(..., alias='createdTime')
    files: Optional[List[FlattenFileVo]] = None
    version_meta: str = Field(..., alias='versionMeta')


class ResponseMessageDatasetInfoVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: DatasetInfoVo


class PageInfoDatasetVersionVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total: Optional[int] = None
    list: Optional[List[DatasetVersionVo]] = None
    page_num: Optional[int] = Field(None, alias='pageNum')
    page_size: Optional[int] = Field(None, alias='pageSize')
    size: Optional[int] = None
    start_row: Optional[int] = Field(None, alias='startRow')
    end_row: Optional[int] = Field(None, alias='endRow')
    pages: Optional[int] = None
    pre_page: Optional[int] = Field(None, alias='prePage')
    next_page: Optional[int] = Field(None, alias='nextPage')
    is_first_page: Optional[bool] = Field(None, alias='isFirstPage')
    is_last_page: Optional[bool] = Field(None, alias='isLastPage')
    has_previous_page: Optional[bool] = Field(None, alias='hasPreviousPage')
    has_next_page: Optional[bool] = Field(None, alias='hasNextPage')
    navigate_pages: Optional[int] = Field(None, alias='navigatePages')
    navigatepage_nums: Optional[List[int]] = Field(None, alias='navigatepageNums')
    navigate_first_page: Optional[int] = Field(None, alias='navigateFirstPage')
    navigate_last_page: Optional[int] = Field(None, alias='navigateLastPage')


class ResponseMessagePageInfoDatasetVersionVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: PageInfoDatasetVersionVo


class Status1(Enum):
    created = 'CREATED'
    ready = 'READY'
    assigning = 'ASSIGNING'
    paused = 'PAUSED'
    preparing = 'PREPARING'
    running = 'RUNNING'
    success = 'SUCCESS'
    cancelling = 'CANCELLING'
    canceled = 'CANCELED'
    fail = 'FAIL'
    unknown = 'UNKNOWN'


class Type4(Enum):
    image = 'IMAGE'
    video = 'VIDEO'
    audio = 'AUDIO'


class BuildRecordVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: str
    project_id: str = Field(..., alias='projectId')
    task_id: str = Field(..., alias='taskId')
    dataset_name: str = Field(..., alias='datasetName')
    status: Status1
    type: Type4
    create_time: int = Field(..., alias='createTime')


class PageInfoBuildRecordVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total: Optional[int] = None
    list: Optional[List[BuildRecordVo]] = None
    page_num: Optional[int] = Field(None, alias='pageNum')
    page_size: Optional[int] = Field(None, alias='pageSize')
    size: Optional[int] = None
    start_row: Optional[int] = Field(None, alias='startRow')
    end_row: Optional[int] = Field(None, alias='endRow')
    pages: Optional[int] = None
    pre_page: Optional[int] = Field(None, alias='prePage')
    next_page: Optional[int] = Field(None, alias='nextPage')
    is_first_page: Optional[bool] = Field(None, alias='isFirstPage')
    is_last_page: Optional[bool] = Field(None, alias='isLastPage')
    has_previous_page: Optional[bool] = Field(None, alias='hasPreviousPage')
    has_next_page: Optional[bool] = Field(None, alias='hasNextPage')
    navigate_pages: Optional[int] = Field(None, alias='navigatePages')
    navigatepage_nums: Optional[List[int]] = Field(None, alias='navigatepageNums')
    navigate_first_page: Optional[int] = Field(None, alias='navigateFirstPage')
    navigate_last_page: Optional[int] = Field(None, alias='navigateLastPage')


class ResponseMessagePageInfoBuildRecordVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: PageInfoBuildRecordVo


class DatasetVersionViewVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: str
    version_name: str = Field(..., alias='versionName')
    alias: Optional[str] = None
    latest: bool
    shared: int
    created_time: int = Field(..., alias='createdTime')


class DatasetViewVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    owner_name: str = Field(..., alias='ownerName')
    project_name: str = Field(..., alias='projectName')
    dataset_id: str = Field(..., alias='datasetId')
    dataset_name: str = Field(..., alias='datasetName')
    shared: int
    versions: List[DatasetVersionViewVo]


class ResponseMessageListDatasetViewVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: List[DatasetViewVo]


class ModelServingStatusVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    progress: Optional[int] = None
    events: Optional[str] = None


class ResponseMessageModelServingStatusVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: ModelServingStatusVo


class PanelPluginVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: str
    name: str
    version: str


class RuntimeSuggestionVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    runtimes: Optional[List[RuntimeVersionVo]] = None


class UserRoleDeleteRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    current_user_pwd: str = Field(..., alias='currentUserPwd')


class FileDeleteRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    path_prefix: str = Field(..., alias='pathPrefix')
    files: List[str] = Field(..., unique_items=True)


class ResponseMessageSignedUrlResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: SignedUrlResponse


class ResourcePool(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: Optional[str] = None
    node_selector: Optional[Dict[str, str]] = Field(None, alias='nodeSelector')
    resources: Optional[List[Resource]] = None
    tolerations: Optional[List[Toleration]] = None
    metadata: Optional[Dict[str, str]] = None
    is_private: Optional[bool] = Field(None, alias='isPrivate')
    visible_user_ids: Optional[List[int]] = Field(None, alias='visibleUserIds')


class DataConsumptionRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    session_id: Optional[str] = Field(None, alias='sessionId')
    consumer_id: Optional[str] = Field(None, alias='consumerId')
    mode: Optional[int] = None
    batch_size: Optional[int] = Field(None, alias='batchSize')
    start: Optional[str] = None
    start_inclusive: Optional[bool] = Field(None, alias='startInclusive')
    end: Optional[str] = None
    end_inclusive: Optional[bool] = Field(None, alias='endInclusive')
    processed_data: Optional[List[DataIndexDesc]] = Field(None, alias='processedData')
    serial: Optional[bool] = None


class ResponseMessageUploadResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: UploadResult


class RecordDesc(BaseModel):
    class Config:
        allow_population_by_field_name = True

    values: List[RecordValueDesc]


class UpdateTableRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    table_name: Optional[str] = Field(None, alias='tableName')
    table_schema_desc: Optional[TableSchemaDesc] = Field(None, alias='tableSchemaDesc')
    records: Optional[List[RecordDesc]] = None


class ScanTableRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    tables: Optional[List[TableDesc]] = None
    start: Optional[str] = None
    start_type: Optional[str] = Field(None, alias='startType')
    start_inclusive: Optional[bool] = Field(None, alias='startInclusive')
    end: Optional[str] = None
    end_type: Optional[str] = Field(None, alias='endType')
    end_inclusive: Optional[bool] = Field(None, alias='endInclusive')
    limit: Optional[int] = None
    keep_none: Optional[bool] = Field(None, alias='keepNone')
    raw_result: Optional[bool] = Field(None, alias='rawResult')
    encode_with_type: Optional[bool] = Field(None, alias='encodeWithType')
    ignore_non_existing_table: Optional[bool] = Field(
        None, alias='ignoreNonExistingTable'
    )


class ResponseMessageTableNameListVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: TableNameListVo


class PageInfoUserVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total: Optional[int] = None
    list: Optional[List[UserVo]] = None
    page_num: Optional[int] = Field(None, alias='pageNum')
    page_size: Optional[int] = Field(None, alias='pageSize')
    size: Optional[int] = None
    start_row: Optional[int] = Field(None, alias='startRow')
    end_row: Optional[int] = Field(None, alias='endRow')
    pages: Optional[int] = None
    pre_page: Optional[int] = Field(None, alias='prePage')
    next_page: Optional[int] = Field(None, alias='nextPage')
    is_first_page: Optional[bool] = Field(None, alias='isFirstPage')
    is_last_page: Optional[bool] = Field(None, alias='isLastPage')
    has_previous_page: Optional[bool] = Field(None, alias='hasPreviousPage')
    has_next_page: Optional[bool] = Field(None, alias='hasNextPage')
    navigate_pages: Optional[int] = Field(None, alias='navigatePages')
    navigatepage_nums: Optional[List[int]] = Field(None, alias='navigatepageNums')
    navigate_first_page: Optional[int] = Field(None, alias='navigateFirstPage')
    navigate_last_page: Optional[int] = Field(None, alias='navigateLastPage')


class ResponseMessagePageInfoUserVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: PageInfoUserVo


class ProjectVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: str
    name: str
    description: Optional[str] = None
    privacy: str
    created_time: int = Field(..., alias='createdTime')
    owner: UserVo
    statistics: Optional[StatisticsVo] = None


class ResponseMessageSystemVersionVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: SystemVersionVo


class ResponseMessageListUpgradeLog(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: List[UpgradeLog]


class ResponseMessageListResourcePool(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: List[ResourcePool]


class PageInfoProjectVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total: Optional[int] = None
    list: Optional[List[ProjectVo]] = None
    page_num: Optional[int] = Field(None, alias='pageNum')
    page_size: Optional[int] = Field(None, alias='pageSize')
    size: Optional[int] = None
    start_row: Optional[int] = Field(None, alias='startRow')
    end_row: Optional[int] = Field(None, alias='endRow')
    pages: Optional[int] = None
    pre_page: Optional[int] = Field(None, alias='prePage')
    next_page: Optional[int] = Field(None, alias='nextPage')
    is_first_page: Optional[bool] = Field(None, alias='isFirstPage')
    is_last_page: Optional[bool] = Field(None, alias='isLastPage')
    has_previous_page: Optional[bool] = Field(None, alias='hasPreviousPage')
    has_next_page: Optional[bool] = Field(None, alias='hasNextPage')
    navigate_pages: Optional[int] = Field(None, alias='navigatePages')
    navigatepage_nums: Optional[List[int]] = Field(None, alias='navigatepageNums')
    navigate_first_page: Optional[int] = Field(None, alias='navigateFirstPage')
    navigate_last_page: Optional[int] = Field(None, alias='navigateLastPage')


class ResponseMessagePageInfoProjectVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: PageInfoProjectVo


class ResponseMessageProjectVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: ProjectVo


class PageInfoTrashVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total: Optional[int] = None
    list: Optional[List[TrashVo]] = None
    page_num: Optional[int] = Field(None, alias='pageNum')
    page_size: Optional[int] = Field(None, alias='pageSize')
    size: Optional[int] = None
    start_row: Optional[int] = Field(None, alias='startRow')
    end_row: Optional[int] = Field(None, alias='endRow')
    pages: Optional[int] = None
    pre_page: Optional[int] = Field(None, alias='prePage')
    next_page: Optional[int] = Field(None, alias='nextPage')
    is_first_page: Optional[bool] = Field(None, alias='isFirstPage')
    is_last_page: Optional[bool] = Field(None, alias='isLastPage')
    has_previous_page: Optional[bool] = Field(None, alias='hasPreviousPage')
    has_next_page: Optional[bool] = Field(None, alias='hasNextPage')
    navigate_pages: Optional[int] = Field(None, alias='navigatePages')
    navigatepage_nums: Optional[List[int]] = Field(None, alias='navigatepageNums')
    navigate_first_page: Optional[int] = Field(None, alias='navigateFirstPage')
    navigate_last_page: Optional[int] = Field(None, alias='navigateLastPage')


class ResponseMessagePageInfoTrashVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: PageInfoTrashVo


class PageInfoRuntimeVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total: Optional[int] = None
    list: Optional[List[RuntimeVo]] = None
    page_num: Optional[int] = Field(None, alias='pageNum')
    page_size: Optional[int] = Field(None, alias='pageSize')
    size: Optional[int] = None
    start_row: Optional[int] = Field(None, alias='startRow')
    end_row: Optional[int] = Field(None, alias='endRow')
    pages: Optional[int] = None
    pre_page: Optional[int] = Field(None, alias='prePage')
    next_page: Optional[int] = Field(None, alias='nextPage')
    is_first_page: Optional[bool] = Field(None, alias='isFirstPage')
    is_last_page: Optional[bool] = Field(None, alias='isLastPage')
    has_previous_page: Optional[bool] = Field(None, alias='hasPreviousPage')
    has_next_page: Optional[bool] = Field(None, alias='hasNextPage')
    navigate_pages: Optional[int] = Field(None, alias='navigatePages')
    navigatepage_nums: Optional[List[int]] = Field(None, alias='navigatepageNums')
    navigate_first_page: Optional[int] = Field(None, alias='navigateFirstPage')
    navigate_last_page: Optional[int] = Field(None, alias='navigateLastPage')


class ResponseMessagePageInfoRuntimeVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: PageInfoRuntimeVo


class ResponseMessageRuntimeInfoVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: RuntimeInfoVo


class ResponseMessageListRuntimeViewVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: List[RuntimeViewVo]


class ModelVersionVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    latest: bool
    tags: Optional[List[str]] = None
    step_specs: List[StepSpec] = Field(..., alias='stepSpecs')
    id: str
    name: str
    alias: str
    size: Optional[int] = None
    created_time: int = Field(..., alias='createdTime')
    owner: Optional[UserVo] = None
    shared: int
    built_in_runtime: Optional[str] = Field(None, alias='builtInRuntime')


class ModelVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: str
    name: str
    created_time: int = Field(..., alias='createdTime')
    owner: UserVo
    version: ModelVersionVo


class PageInfoModelVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total: Optional[int] = None
    list: Optional[List[ModelVo]] = None
    page_num: Optional[int] = Field(None, alias='pageNum')
    page_size: Optional[int] = Field(None, alias='pageSize')
    size: Optional[int] = None
    start_row: Optional[int] = Field(None, alias='startRow')
    end_row: Optional[int] = Field(None, alias='endRow')
    pages: Optional[int] = None
    pre_page: Optional[int] = Field(None, alias='prePage')
    next_page: Optional[int] = Field(None, alias='nextPage')
    is_first_page: Optional[bool] = Field(None, alias='isFirstPage')
    is_last_page: Optional[bool] = Field(None, alias='isLastPage')
    has_previous_page: Optional[bool] = Field(None, alias='hasPreviousPage')
    has_next_page: Optional[bool] = Field(None, alias='hasNextPage')
    navigate_pages: Optional[int] = Field(None, alias='navigatePages')
    navigatepage_nums: Optional[List[int]] = Field(None, alias='navigatepageNums')
    navigate_first_page: Optional[int] = Field(None, alias='navigateFirstPage')
    navigate_last_page: Optional[int] = Field(None, alias='navigateLastPage')


class ResponseMessagePageInfoModelVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: PageInfoModelVo


class ModelInfoVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    version_info: ModelVersionVo = Field(..., alias='versionInfo')
    id: str
    name: str
    version_alias: str = Field(..., alias='versionAlias')
    version_id: str = Field(..., alias='versionId')
    version_name: str = Field(..., alias='versionName')
    version_tag: Optional[str] = Field(None, alias='versionTag')
    created_time: int = Field(..., alias='createdTime')
    shared: int


class ResponseMessageModelInfoVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: ModelInfoVo


class PageInfoModelVersionVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total: Optional[int] = None
    list: Optional[List[ModelVersionVo]] = None
    page_num: Optional[int] = Field(None, alias='pageNum')
    page_size: Optional[int] = Field(None, alias='pageSize')
    size: Optional[int] = None
    start_row: Optional[int] = Field(None, alias='startRow')
    end_row: Optional[int] = Field(None, alias='endRow')
    pages: Optional[int] = None
    pre_page: Optional[int] = Field(None, alias='prePage')
    next_page: Optional[int] = Field(None, alias='nextPage')
    is_first_page: Optional[bool] = Field(None, alias='isFirstPage')
    is_last_page: Optional[bool] = Field(None, alias='isLastPage')
    has_previous_page: Optional[bool] = Field(None, alias='hasPreviousPage')
    has_next_page: Optional[bool] = Field(None, alias='hasNextPage')
    navigate_pages: Optional[int] = Field(None, alias='navigatePages')
    navigatepage_nums: Optional[List[int]] = Field(None, alias='navigatepageNums')
    navigate_first_page: Optional[int] = Field(None, alias='navigateFirstPage')
    navigate_last_page: Optional[int] = Field(None, alias='navigateLastPage')


class ResponseMessagePageInfoModelVersionVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: PageInfoModelVersionVo


class JobVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    exposed_links: List[ExposedLinkVo] = Field(..., alias='exposedLinks')
    id: str
    uuid: str
    model_name: str = Field(..., alias='modelName')
    model_version: str = Field(..., alias='modelVersion')
    model: ModelVo
    job_name: Optional[str] = Field(None, alias='jobName')
    datasets: Optional[List[str]] = None
    dataset_list: Optional[List[DatasetVo]] = Field(None, alias='datasetList')
    runtime: RuntimeVo
    is_builtin_runtime: Optional[bool] = Field(None, alias='isBuiltinRuntime')
    device: Optional[str] = None
    device_amount: Optional[int] = Field(None, alias='deviceAmount')
    owner: UserVo
    created_time: int = Field(..., alias='createdTime')
    stop_time: Optional[int] = Field(None, alias='stopTime')
    job_status: JobStatus = Field(..., alias='jobStatus')
    comment: Optional[str] = None
    step_spec: Optional[str] = Field(None, alias='stepSpec')
    resource_pool: str = Field(..., alias='resourcePool')
    duration: Optional[int] = None
    pinned_time: Optional[int] = Field(None, alias='pinnedTime')


class PageInfoJobVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total: Optional[int] = None
    list: Optional[List[JobVo]] = None
    page_num: Optional[int] = Field(None, alias='pageNum')
    page_size: Optional[int] = Field(None, alias='pageSize')
    size: Optional[int] = None
    start_row: Optional[int] = Field(None, alias='startRow')
    end_row: Optional[int] = Field(None, alias='endRow')
    pages: Optional[int] = None
    pre_page: Optional[int] = Field(None, alias='prePage')
    next_page: Optional[int] = Field(None, alias='nextPage')
    is_first_page: Optional[bool] = Field(None, alias='isFirstPage')
    is_last_page: Optional[bool] = Field(None, alias='isLastPage')
    has_previous_page: Optional[bool] = Field(None, alias='hasPreviousPage')
    has_next_page: Optional[bool] = Field(None, alias='hasNextPage')
    navigate_pages: Optional[int] = Field(None, alias='navigatePages')
    navigatepage_nums: Optional[List[int]] = Field(None, alias='navigatepageNums')
    navigate_first_page: Optional[int] = Field(None, alias='navigateFirstPage')
    navigate_last_page: Optional[int] = Field(None, alias='navigateLastPage')


class ResponseMessagePageInfoJobVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: PageInfoJobVo


class ResponseMessageJobVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: JobVo


class PageInfoTaskVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total: Optional[int] = None
    list: Optional[List[TaskVo]] = None
    page_num: Optional[int] = Field(None, alias='pageNum')
    page_size: Optional[int] = Field(None, alias='pageSize')
    size: Optional[int] = None
    start_row: Optional[int] = Field(None, alias='startRow')
    end_row: Optional[int] = Field(None, alias='endRow')
    pages: Optional[int] = None
    pre_page: Optional[int] = Field(None, alias='prePage')
    next_page: Optional[int] = Field(None, alias='nextPage')
    is_first_page: Optional[bool] = Field(None, alias='isFirstPage')
    is_last_page: Optional[bool] = Field(None, alias='isLastPage')
    has_previous_page: Optional[bool] = Field(None, alias='hasPreviousPage')
    has_next_page: Optional[bool] = Field(None, alias='hasNextPage')
    navigate_pages: Optional[int] = Field(None, alias='navigatePages')
    navigatepage_nums: Optional[List[int]] = Field(None, alias='navigatepageNums')
    navigate_first_page: Optional[int] = Field(None, alias='navigateFirstPage')
    navigate_last_page: Optional[int] = Field(None, alias='navigateLastPage')


class ResponseMessagePageInfoTaskVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: PageInfoTaskVo


class Graph(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[int] = None
    grouping_nodes: Optional[Dict[str, List[GraphNode]]] = Field(
        None, alias='groupingNodes'
    )
    edges: Optional[List[GraphEdge]] = None


class ResponseMessageGraph(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: Graph


class PageInfoSummaryVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total: Optional[int] = None
    list: Optional[List[SummaryVo]] = None
    page_num: Optional[int] = Field(None, alias='pageNum')
    page_size: Optional[int] = Field(None, alias='pageSize')
    size: Optional[int] = None
    start_row: Optional[int] = Field(None, alias='startRow')
    end_row: Optional[int] = Field(None, alias='endRow')
    pages: Optional[int] = None
    pre_page: Optional[int] = Field(None, alias='prePage')
    next_page: Optional[int] = Field(None, alias='nextPage')
    is_first_page: Optional[bool] = Field(None, alias='isFirstPage')
    is_last_page: Optional[bool] = Field(None, alias='isLastPage')
    has_previous_page: Optional[bool] = Field(None, alias='hasPreviousPage')
    has_next_page: Optional[bool] = Field(None, alias='hasNextPage')
    navigate_pages: Optional[int] = Field(None, alias='navigatePages')
    navigatepage_nums: Optional[List[int]] = Field(None, alias='navigatepageNums')
    navigate_first_page: Optional[int] = Field(None, alias='navigateFirstPage')
    navigate_last_page: Optional[int] = Field(None, alias='navigateLastPage')


class ResponseMessagePageInfoSummaryVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: PageInfoSummaryVo


class PageInfoPanelPluginVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total: Optional[int] = None
    list: Optional[List[PanelPluginVo]] = None
    page_num: Optional[int] = Field(None, alias='pageNum')
    page_size: Optional[int] = Field(None, alias='pageSize')
    size: Optional[int] = None
    start_row: Optional[int] = Field(None, alias='startRow')
    end_row: Optional[int] = Field(None, alias='endRow')
    pages: Optional[int] = None
    pre_page: Optional[int] = Field(None, alias='prePage')
    next_page: Optional[int] = Field(None, alias='nextPage')
    is_first_page: Optional[bool] = Field(None, alias='isFirstPage')
    is_last_page: Optional[bool] = Field(None, alias='isLastPage')
    has_previous_page: Optional[bool] = Field(None, alias='hasPreviousPage')
    has_next_page: Optional[bool] = Field(None, alias='hasNextPage')
    navigate_pages: Optional[int] = Field(None, alias='navigatePages')
    navigatepage_nums: Optional[List[int]] = Field(None, alias='navigatepageNums')
    navigate_first_page: Optional[int] = Field(None, alias='navigateFirstPage')
    navigate_last_page: Optional[int] = Field(None, alias='navigateLastPage')


class ResponseMessagePageInfoPanelPluginVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: PageInfoPanelPluginVo


class ResponseMessageRuntimeSuggestionVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: RuntimeSuggestionVo


class ProjectMemberVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: str
    user: UserVo
    project: ProjectVo
    role: RoleVo


class ResponseMessageListProjectMemberVo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str
    message: str
    data: List[ProjectMemberVo]


class QueryTableRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    table_name: Optional[str] = Field(None, alias='tableName')
    columns: Optional[List[ColumnDesc]] = None
    order_by: Optional[List[OrderByDesc]] = Field(None, alias='orderBy')
    descending: Optional[bool] = None
    filter: Optional[TableQueryFilterDesc] = None
    start: Optional[int] = None
    limit: Optional[int] = None
    keep_none: Optional[bool] = Field(None, alias='keepNone')
    raw_result: Optional[bool] = Field(None, alias='rawResult')
    encode_with_type: Optional[bool] = Field(None, alias='encodeWithType')
    ignore_non_existing_table: Optional[bool] = Field(
        None, alias='ignoreNonExistingTable'
    )
    revision: Optional[str] = None


class TableQueryFilterDesc(BaseModel):
    class Config:
        allow_population_by_field_name = True

    operator: str
    operands: Optional[List[TableQueryOperandDesc]] = None


class TableQueryOperandDesc(BaseModel):
    class Config:
        allow_population_by_field_name = True

    filter: Optional[TableQueryFilterDesc] = None
    column_name: Optional[str] = Field(None, alias='columnName')
    bool_value: Optional[bool] = Field(None, alias='boolValue')
    int_value: Optional[int] = Field(None, alias='intValue')
    float_value: Optional[float] = Field(None, alias='floatValue')
    string_value: Optional[str] = Field(None, alias='stringValue')
    bytes_value: Optional[str] = Field(None, alias='bytesValue')


ColumnSchemaDesc.update_forward_refs()
ColumnHintsDesc.update_forward_refs()
QueryTableRequest.update_forward_refs()
TableQueryFilterDesc.update_forward_refs()
