<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2022.1-2022
  ~ starwhale.ai All right reserved. This software is the confidential and proprietary information of
  ~ starwhale.ai ("Confidential Information"). You shall not disclose such Confidential Information and shall use it only
  ~ in accordance with the terms of the license agreement you entered into with starwhale.ai.
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="ai.starwhale.mlops.domain.swds.mapper.SwDatasetVersionMapper">
  <sql id="select_swds_version">
    select dsv.id            as dsv_id,
           dataset_id,
           dsv.version_order as dsv_version_order,
           dsv.owner_id,
           dsv.size          as dsv_size,
           dsv.index_table   as dsv_index_table,
           dsv.storage_auths as dsv_storage_auths,
           version_name      as dsv_version_name,
           version_tag       as dsv_version_tag,
           version_meta      as dsv_version_meta,
           storage_path      as dsv_storage_path,
           status            as status,
           dsv.created_time  as dsv_created_time,
           dsv.modified_time as dsv_modified_time,
           ds.dataset_name   as ds_dataset_name,
           u.id              as user_id,
           u.user_name,
           u.created_time    as user_created_time,
           u.user_enabled
    from dataset_version as dsv,
         dataset_info as ds,
         user_info as u
    where dsv.owner_id = u.id
      and ds.id = dsv.dataset_id
  </sql>

  <delete id="deleteById">
    delete
    from dataset_version
    WHERE id = #{id};
  </delete>

  <select id="listVersions" resultMap="dsVersionResultMap">
    <include refid="select_swds_version"/>
    and dataset_id = #{datasetId}
    <if test="namePrefix != null and namePrefix != ''">
      and version_name like concat(#{namePrefix}, '%')
    </if>
    <if test="tag != null and tag != ''">
      and FIND_IN_SET(#{tag}, version_tag)
    </if>
    order by dsv.version_order desc
  </select>

  <select id="findByDsIdAndVersionNameForUpdate" resultMap="dsVersionResultMap">
    <include refid="select_swds_version"/>
    and dataset_id = #{datasetId}
    and version_name = #{versionName}
    for update
  </select>

  <select id="findByDsIdAndVersionName" resultMap="dsVersionResultMap">
    <include refid="select_swds_version"/>
    <if test="datasetId != null">
      and dataset_id = #{datasetId}
    </if>
    and version_name = #{versionName}
  </select>

  <insert id="addNewVersion"
    keyProperty="id" parameterType="ai.starwhale.mlops.domain.swds.po.SwDatasetVersionEntity"
    useGeneratedKeys="true">
    insert into dataset_version (dataset_id, owner_id, version_name, size, index_table, version_tag,
                                 version_meta, storage_path, files_uploaded)
    values (#{version.datasetId}, #{version.ownerId}, #{version.versionName}, #{version.size},
            #{version.indexTable}, #{version.versionTag}, #{version.versionMeta},
            #{version.storagePath},
            #{version.filesUploaded})
  </insert>

  <select id="getVersionById" resultMap="dsVersionResultMap">
    <include refid="select_swds_version"/>
    and dsv.id = #{dsVersionId}
  </select>

  <select id="findVersionsByStatus" resultMap="dsVersionResultMap">
    <include refid="select_swds_version"/>
    and dsv.status = #{status}
  </select>

  <select id="findVersionsByIds" resultMap="dsVersionResultMap">
    <include refid="select_swds_version"/>
    and dsv.id in
    <foreach collection="ids" separator="," open="(" close=")" item="id">
      #{id}
    </foreach>
  </select>

  <select id="findVersionsByNames" resultMap="dsVersionResultMap">
    <include refid="select_swds_version"/>
    and dsv.version_name in
    <foreach collection="names" separator="," open="(" close=")" item="name">
      #{name}
    </foreach>
  </select>

  <select id="getLatestVersion" resultMap="dsVersionResultMap">
    <include refid="select_swds_version"/>
    and dataset_id = #{datasetId}
    order by dsv.version_order desc
    limit 1
  </select>

  <select id="findByDsIdAndVersionOrder" resultMap="dsVersionResultMap">
    <if test="datasetId != null">
      and dataset_id = #{datasetId}
    </if>
    <include refid="select_swds_version"/>
    and version_order = #{versionOrder}
  </select>

  <update id="revertTo">
    update dataset_version
    set version_order = if((select version_order
                            from ((select version_order
                                   from dataset_version
                                   where id = #{dsVersionId})) as v1)
                             = (select max
                                from (select max(version_order) as max
                                      from dataset_version
                                      where dataset_id = (select dataset_id
                                                          from dataset_version
                                                          where id = #{dsVersionId})) as v2)
                             and
                           (select version_order
                            from ((select version_order
                                   from dataset_version
                                   where id = #{dsVersionId})) as v3)
                             != 0,
                           (select version_order
                            from (select version_order
                                  from dataset_version
                                  where id = #{dsVersionId}) as v4),
                           (select max
                            from ((select max(version_order) as max
                                   from dataset_version
                                   where dataset_id = (select dataset_id
                                                       from dataset_version
                                                       where id = #{dsVersionId}))) as v5) + 1)
    where id = #{dsVersionId}
  </update>

  <update id="update" parameterType="ai.starwhale.mlops.domain.swds.po.SwDatasetVersionEntity">
    update dataset_version
    set version_tag = #{version.versionTag}
    where id = #{version.id}
  </update>

  <update id="updateTag" parameterType="ai.starwhale.mlops.domain.swds.po.SwDatasetVersionEntity">
    update dataset_version
    set version_tag = #{tag}
    where id = #{versionId}
  </update>

  <update id="updateFilesUploaded"
    parameterType="ai.starwhale.mlops.domain.swds.po.SwDatasetVersionEntity">
    update dataset_version
    set files_uploaded = #{version.filesUploaded}
    where id = #{version.id}
  </update>

  <update id="updateStatus">
    update dataset_version
    set status = #{status}
    where id = #{id}
  </update>


  <update id="updateStorageAuths">
    update dataset_version
    set storage_auths = #{storageAuths}
    where id = #{id}
  </update>

  <resultMap id="dsVersionResultMap"
    type="ai.starwhale.mlops.domain.swds.po.SwDatasetVersionEntity">
    <id column="dsv_id" property="id"/>
    <result column="dataset_id" property="datasetId"/>
    <result column="dsv_version_order" property="versionOrder"/>
    <result column="dsv_version_name" property="versionName"/>
    <result column="ds_dataset_name" property="datasetName"/>
    <result column="dsv_size" property="size"/>
    <result column="dsv_index_table" property="indexTable"/>
    <result column="dsv_storage_auths" property="storageAuths"/>
    <result column="dsv_version_tag" property="versionTag"/>
    <result column="dsv_version_meta" property="versionMeta"/>
    <result column="dsv_storage_path" property="storagePath"/>
    <result column="dsv_created_time" property="createdTime"/>
    <result column="dsv_modified_time" property="modifiedTime"/>
    <result column="owner_id" property="ownerId"/>
    <result column="status" property="status"/>
    <result column="files_uploaded" property="filesUploaded"/>
    <association property="owner"
      resultMap="ai.starwhale.mlops.domain.user.mapper.UserMapper.userResultMap"/>
  </resultMap>
</mapper>
