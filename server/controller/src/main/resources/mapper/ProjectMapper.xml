<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2022.1-2022
  ~ starwhale.ai All right reserved. This software is the confidential and proprietary information of
  ~ starwhale.ai ("Confidential Information"). You shall not disclose such Confidential Information and shall use it only
  ~ in accordance with the terms of the license agreement you entered into with starwhale.ai.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="ai.starwhale.mlops.domain.project.mapper.ProjectMapper">
  <insert id="createProject" parameterType="ai.starwhale.mlops.domain.project.po.ProjectEntity"
    useGeneratedKeys="true" keyProperty="id">
    insert into project_info(project_name, owner_id, privacy, project_description, is_default)
    values (#{project.projectName}, #{project.ownerId}, #{project.privacy}, #{project.description}, #{project.isDefault})
  </insert>

  <update id="deleteProject" parameterType="java.lang.Long">
    update project_info
    set is_deleted = 1
    where id = #{id}
  </update>

  <update id="recoverProject" parameterType="java.lang.Long">
    update project_info
    set is_deleted = 0
    where id = #{id}
  </update>

  <update id="modifyProject" parameterType="ai.starwhale.mlops.domain.project.po.ProjectEntity">
    update project_info
    <set>
      <if test="project.projectName != null and project.projectName != ''">
        project_name = #{project.projectName},
      </if>
      <if test="project.description != null and project.description != ''">
        project_description = #{project.description},
      </if>
      <if test="project.ownerId != null">
        owner_id = #{project.ownerId},
      </if>
      <if test="project.privacy != null">
        privacy = #{project.privacy},
      </if>
      <if test="project.isDefault != null">
        is_default = #{project.isDefault}
      </if>
    </set>
    where id = #{project.id}
  </update>

  <sql id="select_project">
    select p.id as project_id,
    p.project_name,
    p.owner_id,
    p.privacy as project_privacy,
    p.project_description,
    p.is_deleted as project_is_deleted,
    p.is_default as project_is_default,
    p.created_time as project_created_time,
    p.modified_time as project_modified_time,
    u.id as user_id,
    u.user_name,
    u.created_time as user_created_time,
    u.user_enabled
    from project_info as p,
    user_info as u
    where u.id = p.owner_id
  </sql>

  <select id="listProjects" parameterType="java.lang.String" resultMap="projectResultMap">
    <include refid="select_project"/>
    and p.is_deleted = #{isDeleted}
    <if test="projectName != null and projectName != ''">
      and p.project_name like concat(#{projectName}, '%')
    </if>
    <if test="userId != null">
      and (p.privacy = 1 or (p.id in (select project_id from user_role_rel where user_id =
      #{userId})))
    </if>
    <if test="order != null and order != ''">
      order by ${order}
    </if>
  </select>

  <select id="listProjectsByOwner" parameterType="java.lang.Long" resultMap="projectResultMap">
    <include refid="select_project"/>
    and p.is_deleted = #{isDeleted}
    and p.owner_id = #{userId}
    <if test="order != null and order != ''">
      order by ${order}
    </if>
  </select>

  <select id="findProject" parameterType="java.lang.Long" resultMap="projectResultMap">
    <include refid="select_project"/>
    and p.id = #{id}
  </select>

  <select id="findProjectByName" parameterType="java.lang.String" resultMap="projectResultMap">
    <include refid="select_project"/>
    and p.project_name = #{projectName}
    and p.is_deleted = 0
  </select>

  <select id="findDefaultProject" parameterType="java.lang.Long" resultMap="projectResultMap">
    <include refid="select_project"/>
    and p.owner_id = #{userId}
    and p.is_default = 1
  </select>

  <select id="listObjectCounts"
    resultType="ai.starwhale.mlops.domain.project.po.ProjectObjectCountEntity">
    select p.id as project_id,
    COALESCE(c1.count_model,0),
    COALESCE(c2.count_dataset,0),
    COALESCE(c3.count_member,0),
    COALESCE(c4.count_jobs,0)
    from project_info as p
    left join
    (select count(*) as count_model, project_id from swmp_info group by project_id) as c1
    on p.id = c1.project_id
    left join
    (select count(*) as count_dataset, project_id from dataset_info group by project_id) as c2
    on p.id = c2.project_id
    left join
    (select count(*) as count_member, project_id from user_role_rel group by project_id) as c3
    on p.id = c3.project_id
    left join
    (select count(*) as count_jobs, project_id from job_info group by project_id) as c4
    on p.id = c4.project_id
    <if test="projectIds != null and projectIds.size() != 0">
      where p.id in
      <foreach item="item" index="index" collection="projectIds"
        open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
  </select>


  <resultMap id="projectResultMap" type="ai.starwhale.mlops.domain.project.po.ProjectEntity">
    <id property="id" column="project_id"/>
    <result property="projectName" column="project_name"/>
    <result property="privacy" column="project_privacy"/>
    <result property="description" column="project_description"/>
    <result property="isDeleted" column="project_is_deleted"/>
    <result property="isDefault" column="project_is_default"/>
    <result property="createdTime" column="project_created_time"/>
    <result property="modifiedTime" column="project_modified_time"/>
    <result property="ownerId" column="owner_id"/>
    <association property="owner"
      resultMap="ai.starwhale.mlops.domain.user.mapper.UserMapper.userResultMap"/>
  </resultMap>
</mapper>
