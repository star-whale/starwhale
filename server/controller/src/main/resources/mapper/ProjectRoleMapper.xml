<!--
  ~ Copyright 2022.1-2022
  ~ StarWhale.ai All right reserved. This software is the confidential and proprietary information of
  ~ StarWhale.ai ("Confidential Information"). You shall not disclose such Confidential Information and shall use it only
  ~ in accordance with the terms of the license agreement you entered into with StarWhale.ai.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="ai.starwhale.mlops.domain.project.mapper.ProjectRoleMapper">
    <select id="listSystemRoles" resultMap="projectRoleResultMap">
        select rel.id as project_role_id,
               rel.user_id,
               rel.role_id,
               rel.created_time as project_role_created_time,
               rel.modified_time as project_role_modified_time,
               r.role_code,
               r.role_name,
               r.role_description  ,
               u.user_name,
               u.user_enabled,
               u.created_time as user_created_time,
               u.modified_time as user_modified_time
        from user_role_rel as rel,
             user_info as u,
             user_role_info as r
        where rel.project_id = 0
          and rel.role_id = r.id
          and rel.user_id = u.id
        order by u.user_name
    </select>
    <select id="listUserRoles" resultMap="projectRoleResultMap">
        select
            view.*,
            p.project_name,
            p.is_deleted,
            p.created_time as project_created_time,
            p.modified_time as project_modified_time
        from (select rel.id            as project_role_id,
                     rel.user_id,
                     rel.role_id,
                     rel.project_id,
                     rel.created_time  as project_role_created_time,
                     rel.modified_time as project_role_modified_time,
                     r.role_code,
                     r.role_name,
                     r.role_description
              from user_role_rel as rel,
                   user_role_info as r
              where rel.user_id = #{userId}
                <if test="projectId != null">
                    and rel.project_id = #{projectId}
                </if>
                and rel.role_id = r.id
              order by rel.id desc) as view
        left join
             project_info as p
             on p.id = view.project_id
        where p.is_deleted = 0 or p.is_deleted is null
    </select>
    <select id="listProjectRoles" resultMap="projectRoleResultMap">
        select
            view.*,
            p.project_name,
            p.is_deleted,
            p.created_time as project_created_time,
            p.modified_time as project_modified_time
        from (select rel.id            as project_role_id,
                     rel.user_id,
                     rel.role_id,
                     rel.project_id,
                     rel.created_time  as project_role_created_time,
                     rel.modified_time as project_role_modified_time,
                     r.role_code,
                     r.role_name,
                     r.role_description,
                     u.user_name,
                     u.user_enabled,
                     u.created_time    as user_created_time,
                     u.modified_time   as user_modified_time
              from user_role_rel as rel,
                   user_info as u,
                   user_role_info as r
              where rel.project_id = #{projectId}
                and rel.role_id = r.id
                and rel.user_id = u.id
              order by rel.id desc) as view
        left join
             project_info as p
        on p.id = view.project_id
    </select>

    <insert id="addProjectRole" parameterType="ai.starwhale.mlops.domain.project.po.ProjectRoleEntity" useGeneratedKeys="true" keyProperty="id">
        replace into user_role_rel (user_id, role_id, project_id)
        values (#{projectRole.userId}, #{projectRole.roleId}, #{projectRole.projectId})
    </insert>

    <insert id="addProjectRoleByName">
        replace into user_role_rel (user_id, role_id, project_id)
        values (#{userId}, (select id from user_role_info where role_name=#{roleName}), #{projectId})
    </insert>

    <delete id="deleteProjectRole">
        delete from user_role_rel
        where id = #{projectRoleId}
    </delete>

    <update id="updateProjectRole" parameterType="ai.starwhale.mlops.domain.project.po.ProjectRoleEntity">
        update user_role_rel
        set role_id = #{projectRole.roleId}
        where id = #{projectRole.id}
    </update>

    <resultMap id="projectResultMap" type="ai.starwhale.mlops.domain.project.po.ProjectEntity">
        <id property="id" column="project_id" />
        <result property="projectName" column="project_name"/>
        <result property="createdTime" column="project_created_time"/>
        <result property="modifiedTime" column="project_modified_time"/>
    </resultMap>

    <resultMap id="projectRoleResultMap" type="ai.starwhale.mlops.domain.project.po.ProjectRoleEntity" >
        <id property="id" column="project_role_id" />
        <result property="userId" column="user_id"/>
        <result property="roleId" column="role_id"/>
        <result property="projectId" column="project_id"/>
        <result property="createdTime" column="project_role_created_time"/>
        <result property="modifiedTime" column="project_role_modified_time"/>
        <association property="user" resultMap="ai.starwhale.mlops.domain.user.mapper.UserMapper.userResultMap" />
        <association property="role" resultMap="ai.starwhale.mlops.domain.user.mapper.RoleMapper.roleResultMap" />
        <association property="project" resultMap="projectResultMap" />
    </resultMap>
</mapper>
