apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: controller
  labels: {{ include "chart.controller.labels" . | nindent 4 }}

spec:
  replicas: 1
  selector:
    matchLabels: {{ include "chart.controller.labels" . | nindent 6}}
  template:
    metadata:
      labels: {{ include "chart.controller.labels" . | nindent 8}}
    spec:
      volumes:
        - name: controller-storage
          {{- if .Values.minio.enabled }}
          hostPath:
            path: {{ .Values.storage.agentHostPathRoot }}/controller
            type: DirectoryOrCreate
          {{- else }}
          persistentVolumeClaim:
            claimName: controller
          {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "chart.serviceAccountName" . }}
      {{- else }}
      serviceAccountName: {{ .Values.serviceAccount.customServiceAccount }}
      {{- end }}
      containers:
        - name: controller
          image: "{{ .Values.image.registry }}/{{ .Values.image.org }}/{{ .Values.image.server.repo }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          ports:
            - containerPort: {{ .Values.controller.containerPort }}
          volumeMounts:
            - name: controller-storage
              mountPath: "/opt/starwhale.java/static"
              subPath: static
            - name: controller-storage
              mountPath: "{{ .Values.controller.fs.rootdir }}"
              subPath: controller-fs
          {{- if not .Values.minikube.enabled }}
          resources:
            {{- toYaml .Values.resources.controller | nindent 12}}
          {{- end }}
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: {{ .Values.controller.containerPort }}
            initialDelaySeconds: 50
            periodSeconds: 10
            timeoutSeconds: 90
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.controller.containerPort }}
            initialDelaySeconds: 50
            periodSeconds: 10
            timeoutSeconds: 90
            successThreshold: 1
            failureThreshold: 5
          startupProbe:
            httpGet:
              path: /
              port: {{ .Values.controller.containerPort }}
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 90
            failureThreshold: 15
          env:
            {{ include "chart.mirror.env" . | nindent 12 }}
            - name: JAR
              value: controller
              {{- if not .Values.minikube.enabled }}
            - name: JVM_XMX
              value: {{ .Values.resources.controller.limits.memory }}
              {{- end }}
            - name: SW_CONTROLLER_PORT
              value: "{{ .Values.controller.containerPort }}"
            - name: SW_JWT_TOKEN_EXPIRE_MINUTES
              value: "{{ .Values.controller.jwt.tokenExpireMinutes }}"
            - name: SW_UPLOAD_MAX_FILE_SIZE
              value: "{{ .Values.controller.upload.maxFileSize }}"
            - name: SW_STORAGE_PREFIX
              value: "{{ .Release.Name }}"
            - name: SW_STORAGE_FS_ROOT_DIR
              value: "{{ .Values.controller.fs.rootdir }}"
            - name: SW_RUNTIME_IMAGE_DEFAULT
              value: "{{ .Values.image.registry }}/{{ .Values.image.org }}/{{ .Values.image.base.repo }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
            - name: SW_DOCKER_REGISTRY_URL
              value: "{{ .Values.image.registry }}"
            - name: SW_TASK_SPLIT_SIZE
              value: "{{ .Values.controller.taskSplitSize }}"
            - name: SW_HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: SW_K8S_NAME_SPACE
              value: {{ .Release.Namespace }}
            - name: SW_K8S_HOST_PATH_FOR_CACHE
              value: {{ .Values.storage.agentHostPathRoot }}/job
            - name: SW_INSTANCE_URI
              value: "http://controller:{{ .Values.controller.containerPort }}"
            {{- if .Values.minio.enabled }}
            - name: SW_STORAGE_ENDPOINT
              value: "http://minio:{{ .Values.minio.ports.api }}"
            - name: SW_STORAGE_BUCKET
              value: "{{ .Values.minio.defaultBuckets }}"
            - name: SW_STORAGE_ACCESSKEY
              value: "{{ .Values.minio.auth.rootUser }}"
            - name: SW_STORAGE_SECRETKEY
              value: "{{ .Values.minio.auth.rootPassword }}"
            - name: SW_STORAGE_REGION
              value: "local"
            {{- else }}
            - name: SW_STORAGE_ENDPOINT
              value: "http://{{ .Values.externalOSS.host }}:{{ .Values.externalOSS.port }}"
            - name: SW_STORAGE_BUCKET
              value: "{{ .Values.externalOSS.defaultBuckets }}"
            - name: SW_STORAGE_ACCESSKEY
              value: "{{ .Values.externalOSS.accessKey }}"
            - name: SW_STORAGE_SECRETKEY
              value: "{{ .Values.externalOSS.secretKey }}"
            - name: SW_STORAGE_REGION
              value: "{{ .Values.externalOSS.region }}"
            - name: SW_STORAGE_TYPE
              value: "{{ .Values.externalOSS.type }}"
            {{- end }}
            {{- if .Values.mysql.enabled }}
            - name: SW_METADATA_STORAGE_IP
              value: "mysql"
            - name: SW_METADATA_STORAGE_PORT
              value: "{{ .Values.mysql.ports.api }}"
            - name: SW_METADATA_STORAGE_PASSWORD # todo whether use secret
              value: "{{ .Values.mysql.auth.password }}"
            - name: SW_METADATA_STORAGE_USER
              value: "{{ .Values.mysql.auth.username }}"
            - name: SW_METADATA_STORAGE_DB
              value: "{{ .Values.mysql.auth.database }}"
            {{- else }}
            - name: SW_METADATA_STORAGE_IP
              value: "{{ .Values.externalMySQL.host }}"
            - name: SW_METADATA_STORAGE_PORT
              value: "{{ .Values.externalMySQL.port }}"
            - name: SW_METADATA_STORAGE_PASSWORD # todo whether use secret
              value: "{{ .Values.externalMySQL.password }}"
            - name: SW_METADATA_STORAGE_USER
              value: "{{ .Values.externalMySQL.username }}"
            - name: SW_METADATA_STORAGE_DB
              value: "{{ .Values.externalMySQL.database }}"
            {{- end }}
---
{{ if not .Values.minio.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: controller
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "chart.controller.labels" . | nindent 4 }}
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ include "common.names.fullname" . }}-controller
  volumeMode: Filesystem
  volumeName: {{ include "common.names.fullname" . }}-pv-controller
  resources:
    requests:
      storage: {{ .Values.controller.persistence.size | quote }}
{{ end }}