name: Release Docker Image and Pypi Package

on:
  release:
    types: [published]

jobs:
  doc-release:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      - name: Use Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: "yarn"
          cache-dependency-path: "./docs/yarn.lock"

      - name: Get yarn cache directory path
        id: yarn-cache-docs-dir-path
        run: |
          echo "::set-output name=dir::"
          yarn cache dir

      - uses: actions/cache@v3
        id: yarn-cache-docs
        with:
          path: |
            ${{ steps.yarn-cache-docs-dir-path.outputs.dir }}
            **/node_modules
          key: ${{ runner.os }}-yarn-docs-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-docs-

      - name: Install docs dependencies
        working-directory: ./docs
        if: steps.yarn-cache-docs.outputs.cache-hit != 'true' # Over here!
        run: make install-req

      - name: Checkout gh-pages branch for archived versions docs
        uses: actions/checkout@v3
        with:
          lfs: false
          ref: gh-pages
          path: gh-pages

      - name: Copy archived version files
        run: |
          [ ! -d gh-pages/.archived-versions ] && exit 0
          cp gh-pages/.archived-versions/versions.json docs/
          cp -R gh-pages/.archived-versions/versioned_sidebars docs/
          cp -R gh-pages/.archived-versions/versioned_docs docs/
          cp -R gh-pages/.archived-versions/i18n/zh/docusaurus-plugin-content-docs/version-* docs/i18n/zh/docusaurus-plugin-content-docs/

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: true

      - name: Generate new release version
        working-directory: ./docs
        env:
          RELEASE_VERSION: ${{ steps.tag.outputs.tag }}
        run: make versioning-docs

      - name: Lint docs
        working-directory: ./docs
        run: make lint-docs

      - name: Build docs
        working-directory: ./docs
        run: make build-docs

      - name: Update archived version files
        run: |
          mkdir -p docs/build/.archived-versions
          cp docs/versions.json docs/build/.archived-versions/
          cp -R docs/versioned_sidebars docs/build/.archived-versions/
          cp -R docs/versioned_docs docs/build/.archived-versions/
          mkdir -p docs/build/.archived-versions/i18n/zh/docusaurus-plugin-content-docs
          cp -R docs/i18n/zh/docusaurus-plugin-content-docs/version-* docs/build/.archived-versions/i18n/zh/docusaurus-plugin-content-docs/

      - name: Publish to Github Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/build
          user_name: github-actions[bot]
          keep_files: true
          cname: doc.starwhale.ai
          user_email: "github-actions[bot]@users.noreply.github.com"

  pypi-release:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v3
        with:
          python-version: "3.7"
          architecture: "x64"

      - name: Get pip cache
        id: pip-cache-path
        run: echo "::set-output name=dir::$(pip cache dir)"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: pip-cache
        with:
          path: ${{ steps.pip-cache-path.outputs.dir }}
          key: ${{ runner.os }}-codestyle-${{ hashFiles('client/requirements-dev.txt')}}

      - name: Install dependencies
        working-directory: ./client
        run: |
          make install-sw
          make install-dev-req

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: true

      - name: Build Python Package
        working-directory: ./client
        env:
          PYPI_RELEASE_VERSION: ${{ steps.tag.outputs.tag }}
        run: make build-wheel

      - name: Publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          packages_dir: client/dist/
          verify_metadata: false

  starwhale-image-release:
    runs-on: ubuntu-latest
    needs:
      - pypi-release

    strategy:
      matrix:
        cuda_version:
          [
            "",
            "11.3",
            "11.3-cudnn8",
            "11.4",
            "11.4-cudnn8",
            "11.5",
            "11.5-cudnn8",
            "11.6",
            "11.6-cudnn8",
            "11.7",
          ]

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push docker image
        working-directory: ./docker
        env:
          RELEASE_VERSION: ${{ steps.tag.outputs.tag }}
          PYPI_RELEASE_VERSION: ${{ steps.tag.outputs.tag }}
        run: |
          if [ "${{matrix.cuda_version}}" = "" ]; then
            make build-release-starwhale
          else
            make build-release-starwhale-cuda version=${{matrix.cuda_version}}
          fi

  server-image-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
          cache-dependency-path: "./console/yarn.lock"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Install dev tools
        working-directory: ./console
        run: make install-dev-tools

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install project dependencies
        working-directory: ./console
        if: steps.yarn-cache.outputs.cache-hit != 'true' # Over here!
        run: make install-dependencies

      - name: Yarn Build
        working-directory: ./console
        run: make build-all
        env:
          NODE_OPTIONS: "--max-old-space-size=5120"

      # jar build
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "adopt"
          cache: "maven"
          server-id: starwhale # Value of the distributionManagement/repository/id field of the pom.xml

      - name: Build with Maven
        working-directory: ./server
        run: make build-package

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push docker image
        working-directory: ./docker
        env:
          RELEASE_VERSION: ${{ steps.tag.outputs.tag }}
          PYPI_RELEASE_VERSION: ${{ steps.tag.outputs.tag }}
        run: |
          make build-server

  helm-charts-release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    needs:
      - server-image-release

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.8.1

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: true

      - name: Package, Index and Publish
        working-directory: ./docker/charts
        env:
          RELEASE_VERSION: ${{ steps.tag.outputs.tag }}
          API_TOKEN_GITHUB: ${{ secrets.RELEASE_HELM_CHARTS_TOKEN }}
        run: |
          make cleanup
          make package
          make upload

  pre-deploy:
    runs-on: self-hosted
    needs:
      - helm-charts-release
      - starwhale-image-release

    steps:
      - name: Helm Charts Upgrade
        run: |
          helm repo add starwhale https://star-whale.github.io/charts/
          helm repo update
          helm upgrade --devel --install starwhale starwhale/starwhale --namespace starwhale --create-namespace --version ${{ needs.helm-charts-release.outputs.tag }} --set image.registry=${{ secrets.PRIVATE_PRE_DOCKER_REGISTRY }}
