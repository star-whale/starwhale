"use strict";(self.webpackChunkstarwhale_docs=self.webpackChunkstarwhale_docs||[]).push([[8277],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(a),m=r,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return a?n.createElement(h,l(l({ref:t},p),{},{components:a})):n.createElement(h,l({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},5537:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return d}});var n=a(3117),r=(a(7294),a(3905));const i={title:"\u6570\u636e\u96c6\u6784\u5efa\u548c\u52a0\u8f7d"},l=void 0,o={unversionedId:"reference/sdk/dataset",id:"version-0.4.0/reference/sdk/dataset",title:"\u6570\u636e\u96c6\u6784\u5efa\u548c\u52a0\u8f7d",description:"1. starwhale.SWDSBinBuildExecutor",source:"@site/i18n/zh/docusaurus-plugin-content-docs/version-0.4.0/reference/sdk/dataset.md",sourceDirName:"reference/sdk",slug:"/reference/sdk/dataset",permalink:"/zh/docs/reference/sdk/dataset",draft:!1,editUrl:"https://github.com/star-whale/starwhale/tree/main/docs/versioned_docs/version-0.4.0/reference/sdk/dataset.md",tags:[],version:"0.4.0",frontMatter:{title:"\u6570\u636e\u96c6\u6784\u5efa\u548c\u52a0\u8f7d"},sidebar:"mainSidebar",previous:{title:"\u6570\u636e\u7c7b\u578b",permalink:"/zh/docs/reference/sdk/data_type"},next:{title:"\u6a21\u578b\u8bc4\u6d4b",permalink:"/zh/docs/reference/sdk/evaluation"}},s={},d=[{value:"1. starwhale.SWDSBinBuildExecutor",id:"1-starwhaleswdsbinbuildexecutor",level:2},{value:"2. starwhale.UserRawBuildExecutor",id:"2-starwhaleuserrawbuildexecutor",level:2},{value:"3. starwhale.BuildExecutor",id:"3-starwhalebuildexecutor",level:2},{value:"4. starwhale.get_data_loader",id:"4-starwhaleget_data_loader",level:2}],p={toc:d};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"1-starwhaleswdsbinbuildexecutor"},"1. starwhale.SWDSBinBuildExecutor"),(0,r.kt)("p",null,"\u63d0\u4f9bswds-bin\u683c\u5f0f\u7684\u6570\u636e\u96c6\u6784\u5efa\u7c7b\uff0c\u9700\u8981\u7528\u6237\u5b9e\u73b0 ",(0,r.kt)("inlineCode",{parentName:"p"},"iter_item")," \u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\uff0c\u5305\u542bdata\u548cannotations\u3002Github\u4e0a\u7684",(0,r.kt)("a",{parentName:"p",href:"https://github.com/star-whale/starwhale/blob/dc6e6fdeae2f7c5bd0e72ccd8fb50768b1ce0826/client/starwhale/api/_impl/dataset/builder.py#L138"},"\u4ee3\u7801\u94fe\u63a5"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class DatasetProcessExecutor(SWDSBinBuildExecutor):\n    def iter_item(self) -> t.Generator[t.Tuple[t.Any, t.Any], None, None]:\n        ...\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"iter_item")," \u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\uff0c\u901a\u5e38\u5199\u6cd5\u662ffor\u5faa\u73af\u4e2d\uff0cyield data\u548cannotations\u3002\u5bf9\u4e8eswds-bin\u683c\u5f0f\u7684\u6570\u636e\u96c6\uff0cdata\u4e00\u822c\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"Audio"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"Image"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"Text"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"GrayscaleImage"),"\u548c",(0,r.kt)("inlineCode",{parentName:"p"},"Binary"),"\u3002\u4e5f\u63a5\u53d7\u7528\u6237yield bytes\u7c7b\u578b\u7684data\uff0c\u4f1a\u81ea\u52a8\u8f6c\u5316\u6210 ",(0,r.kt)("inlineCode",{parentName:"p"},"Binary")," \u7c7b\u578b\u3002\u4ee5",(0,r.kt)("a",{parentName:"p",href:"https://github.com/star-whale/starwhale/tree/dc6e6fdeae2f7c5bd0e72ccd8fb50768b1ce0826/example/mnist"},"MNIST"),"\u4e3a\u4f8b\uff0c\u6784\u5efaswds\u7684\u6570\u636e\u96c6\u57fa\u672c\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import struct\nimport typing as t\nfrom pathlib import Path\n\nfrom starwhale import (\n    Link,\n    GrayscaleImage,\n    SWDSBinBuildExecutor,\n)\n\nclass DatasetProcessExecutor(SWDSBinBuildExecutor):\n    def iter_item(self) -> t.Generator[t.Tuple[t.Any, t.Any], None, None]:\n        root_dir = Path(__file__).parent.parent / "data"\n\n        with (root_dir / "t10k-images-idx3-ubyte").open("rb") as data_file, (\n            root_dir / "t10k-labels-idx1-ubyte"\n        ).open("rb") as label_file:\n            _, data_number, height, width = struct.unpack(">IIII", data_file.read(16))\n            _, label_number = struct.unpack(">II", label_file.read(8))\n            print(\n                f">data({data_file.name}) split data:{data_number}, label:{label_number} group"\n            )\n            image_size = height * width\n\n            for i in range(0, min(data_number, label_number)):\n                _data = data_file.read(image_size)\n                _label = struct.unpack(">B", label_file.read(1))[0]\n                yield GrayscaleImage(\n                    _data,\n                    display_name=f"{i}",\n                    shape=(height, width, 1),\n                ), {"label": _label}\n')),(0,r.kt)("h2",{id:"2-starwhaleuserrawbuildexecutor"},"2. starwhale.UserRawBuildExecutor"),(0,r.kt)("p",null,"\u63d0\u4f9bremote-link\u548cuser-raw\u683c\u5f0f\u7684\u6570\u636e\u96c6\u6784\u5efa\u7c7b\uff0c\u9700\u8981\u7528\u6237\u5b9e\u73b0 ",(0,r.kt)("inlineCode",{parentName:"p"},"iter_item")," \u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\uff0c\u5305\u542bdata\u548cannotations\uff0c\u5176\u4e2ddata\u9700\u8981\u662f\u4e00\u4e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"starwhale.Link")," \u7c7b\u578b\u3002Github\u4e0a\u7684",(0,r.kt)("a",{parentName:"p",href:"https://github.com/star-whale/starwhale/blob/dc6e6fdeae2f7c5bd0e72ccd8fb50768b1ce0826/client/starwhale/api/_impl/dataset/builder.py#L307"},"\u4ee3\u7801\u94fe\u63a5"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class RawDatasetProcessExecutor(UserRawBuildExecutor):\n    def iter_item(self) -> t.Generator[t.Tuple[t.Any, t.Any], None, None]:\n        ...\n")),(0,r.kt)("p",null,"\u4ee5",(0,r.kt)("a",{parentName:"p",href:"https://github.com/star-whale/starwhale/tree/main/example/speech_command"},"Speech Commands"),"\u4e3a\u4f8b\uff0c\u6784\u5efaremote-link\u7684\u6570\u636e\u96c6\u57fa\u672c\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import typing as t\nfrom pathlib import Path\n\nfrom starwhale import (\n    Link,\n    Audio,\n    MIMEType,\n    S3LinkAuth,\n    UserRawBuildExecutor,\n)\nclass LinkRawDatasetBuildExecutor(UserRawBuildExecutor):\n\n    _auth = S3LinkAuth(\n        name="speech", access_key="minioadmin", secret="minioadmin", region="local"\n    )\n    _addr = "10.131.0.1:9000"\n    _bucket = "users"\n\n    def iter_item(self) -> t.Generator[t.Tuple[t.Any, t.Any], None, None]:\n        import boto3\n        from botocore.client import Config\n\n        s3 = boto3.resource(\n            "s3",\n            endpoint_url=f"http://{self._addr}",\n            aws_access_key_id=self._auth.access_key,\n            aws_secret_access_key=self._auth.secret,\n            config=Config(signature_version="s3v4"),\n            region_name=self._auth.region,\n        )\n\n        objects = s3.Bucket(self._bucket).objects.filter(\n            Prefix="dataset/SpeechCommands/speech_commands_v0.02"\n        )\n\n        for obj in objects:\n            path = Path(obj.key)  # type: ignore\n            command = path.parent.name\n            if (\n                command == "_background_noise_"\n                or "_nohash_" not in path.name\n                or obj.size < 10240\n                or not path.name.endswith(".wav")\n            ):\n                continue\n\n            speaker_id, utterance_num = path.stem.split("_nohash_")\n            uri = f"s3://{self._addr}/{self._bucket}/{obj.key.lstrip(\'/\')}"\n            data = Link(\n                uri,\n               self._auth,\n                size=obj.size,\n                data_type=Audio(\n                    display_name=f"{command}/{path.name}",\n                    mime_type=MIMEType.WAV,\n                    shape=(1,),\n                ),\n            )\n            annotations = {\n                "label": command,\n                "speaker_id": speaker_id,\n                "utterance_num": int(utterance_num),\n            }\n            yield data, annotations\n')),(0,r.kt)("h2",{id:"3-starwhalebuildexecutor"},"3. starwhale.BuildExecutor"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SWDSBinBuildExecutor")," \u7c7b\u7684\u522b\u79f0\uff0c\u540c\u4e3aswds-bin\u683c\u5f0f\u7684\u6570\u636e\u96c6\u6784\u5efa\u7c7b\u3002"),(0,r.kt)("h2",{id:"4-starwhaleget_data_loader"},"4. starwhale.get_data_loader"),(0,r.kt)("p",null,"\u83b7\u53d6Starwhale Dataset\u7684Data Loader\uff0c\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\uff0c\u80fd\u591f\u83b7\u53d6\u6570\u636e\u96c6\u4e2d\u5177\u4f53\u6837\u672c\u7684\u7d22\u5f15\u3001data\u548cannotations\u3002Github\u4e0a\u7684",(0,r.kt)("a",{parentName:"p",href:"https://github.com/star-whale/starwhale/blob/dc6e6fdeae2f7c5bd0e72ccd8fb50768b1ce0826/client/starwhale/api/_impl/dataset/loader.py"},"\u4ee3\u7801\u94fe\u63a5"),"\u3002\u8be5\u51fd\u6570\u8fd4\u56de\u7684loader\u6709\u4e24\u79cd:\u4e00\u79cd\u662f\u8868\u793aswds-bin\u683c\u5f0f\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"SWDSBinDataLoader"),", \u53e6\u4e00\u79cd\u662f\u8868\u793aremote-link\u6216user-raw\u683c\u5f0f\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"UserRawDataLoader"),"\u3002\u4e24\u79cdloader\u7c7b\u578b\u76ee\u524d\u90fd\u80fd\u5904\u7406\u5728LocalFS\u548cS3\u534f\u8bae\u7684\u5bf9\u8c61\u5b58\u50a8\u4e0a\u6570\u636e\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_data_loader(\n    dataset_uri: URI,\n    start: int = 0,\n    end: int = sys.maxsize,\n    logger: t.Union[loguru.Logger, None] = None,\n) -> DataLoader:\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u53c2\u6570"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dataset_uri")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"starwhale.URI")," \u5bf9\u8c61")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"start")),(0,r.kt)("td",{parentName:"tr",align:null},"\u6570\u636e\u96c6index\u7684\u8d77\u59cb\u4f4d\uff0c\u9ed8\u8ba4\u4ece0\u5f00\u59cb")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"end")),(0,r.kt)("td",{parentName:"tr",align:null},"\u6570\u636e\u96c6index\u7684\u7ed3\u675f\u4f4d\u3002start\u548cend\u8868\u793a\u662f\u5de6\u95ed\u53f3\u5f00\u7684\u533a\u95f4\uff0c\u5373 ",(0,r.kt)("inlineCode",{parentName:"td"},"start <= i < end"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"logger")),(0,r.kt)("td",{parentName:"tr",align:null},"\u53ef\u4f20\u5165\u81ea\u5b9a\u4e49\u7684logger\u5bf9\u8c61")))),(0,r.kt)("p",null,"\u4f7f\u7528\u793a\u4f8b\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from starwhale import get_data_loader, URI\n\nuri = URI("mnist/version/latest", expected_type="dataset")\ndata_loader = get_data_loader(dataset_uri=uri)\n\nfor idx, data, annotations in data_loader:\n    ...\n')))}u.isMDXComponent=!0}}]);